name: macOS Release Build

on:
  release:
    types: [published, created]
  workflow_dispatch:  # Allow manual triggering

permissions:
  contents: write  # Needed to create releases and upload artifacts

env:
  BUILD_TYPE: Release
  MACOSX_DEPLOYMENT_TARGET: "11"

jobs:
  build-macos-release:
    runs-on: macos-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    # =====================================================================
    # STEP 1: Build C Library (dylib) using vcpkg and cmake
    # =====================================================================

    - name: Cache vcpkg
      uses: actions/cache@v4
      with:
        path: |
          ${{ github.workspace }}/vcpkg
          !${{ github.workspace }}/vcpkg/buildtrees
          !${{ github.workspace }}/vcpkg/packages
          !${{ github.workspace }}/vcpkg/downloads
        key: vcpkg-macos-${{ hashFiles('vcpkg.json') }}-v2

    - name: Setup vcpkg
      uses: actions/checkout@v4
      with:
        repository: microsoft/vcpkg
        path: vcpkg
        fetch-depth: 0

    - name: Bootstrap vcpkg
      run: |
        cd vcpkg
        ./bootstrap-vcpkg.sh -disableMetrics
        # Update vcpkg to latest
        git pull origin master
    - name: Build C Library (dylib)
      run: |
        echo "=== Building InterceptSuite C Library for macOS ==="
        chmod +x build_macos.sh
        ./build_macos.sh --vcpkg-root=${{ github.workspace }}/vcpkg
        echo "=== Verifying dylib build ==="
        ls -la build/
        file build/libIntercept.dylib

        # Verify architecture is ARM64
        echo "=== Verifying architecture ==="
        if file build/libIntercept.dylib | grep -q "arm64"; then
          echo "✅ Confirmed ARM64 architecture"
        else
          echo "❌ ERROR: Expected ARM64 architecture not found"
          file build/libIntercept.dylib
          exit 1
        fi
    # =====================================================================
    # STEP 2: Setup .NET for InterceptSuite GUI
    # =====================================================================

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    # =====================================================================
    # STEP 2.5: Import Code Signing Certificates & Setup Notarization
    # =====================================================================

    - name: Import Code Signing Certificates
      env:
        KEYCHAIN_PASSWORD: ${{ secrets.MACOS_CERTIFICATE_PASSWORD }}
        MACOS_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE_APP }}
        MACOS_CERTIFICATE_PWD: ${{ secrets.MACOS_CERTIFICATE_PASSWORD }}
        INSTALLER_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE_INSTALLER }}
        TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        MY_KEYCHAIN: "build.keychain"
      run: |
        # Reset to default login keychain first
        security list-keychains -d user -s login.keychain

        # Create temporary keychain
        security create-keychain -p "$KEYCHAIN_PASSWORD" "$MY_KEYCHAIN"

        # Append temp keychain to the user domain
        security list-keychains -d user -s "$MY_KEYCHAIN" $(security list-keychains -d user | sed s/\"//g)

        # Remove relock timeout
        security set-keychain-settings "$MY_KEYCHAIN"

        # Unlock keychain
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$MY_KEYCHAIN"

        # Import app signing certificate
        echo "$MACOS_CERTIFICATE" | base64 --decode > certificate.p12
        security import certificate.p12 -k "$MY_KEYCHAIN" -P "$MACOS_CERTIFICATE_PWD" -A -T "/usr/bin/codesign" -T "/usr/bin/productsign"

        # Import installer signing certificate
        echo "$INSTALLER_CERTIFICATE" | base64 --decode > installer_certificate.p12
        security import installer_certificate.p12 -k "$MY_KEYCHAIN" -P "$MACOS_CERTIFICATE_PWD" -A -T "/usr/bin/codesign" -T "/usr/bin/productsign"

        # Enable codesigning from a non user interactive shell for both certificates
        security set-key-partition-list -S apple-tool:,apple: -s -k "$KEYCHAIN_PASSWORD" -D "$TEAM_ID" -t private "$MY_KEYCHAIN"

        # Clean up certificate files
        rm certificate.p12 installer_certificate.p12

    - name: Setup Notarization Profile
      env:
        APPLE_ID: ${{ secrets.APPLE_ID }}
        APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
        APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      run: |
        # Store the notarization credentials so that we can prevent a UI password dialog
        # from blocking the CI
        echo "Creating keychain profile for notarization"
        xcrun notarytool store-credentials "notarytool-profile" --apple-id "$APPLE_ID" --team-id "$APPLE_TEAM_ID" --password "$APPLE_APP_SPECIFIC_PASSWORD"

    - name: Sign C Library (dylib)
      env:
        SIGNING_IDENTITY: ${{ secrets.APPLE_TEAM_ID }}
      run: |
        echo "=== Signing C Library dylib ==="
        codesign --force --options runtime --timestamp --sign "$SIGNING_IDENTITY" build/libIntercept.dylib

        echo "=== Verifying dylib signature ==="
        codesign -dv build/libIntercept.dylib

        echo "✅ C Library dylib signed successfully"

    # =====================================================================
    # STEP 3: Build .NET Application and Create Package
    # =====================================================================

    - name: Build and Create .NET Application
      working-directory: GUI/InterceptSuite/Installer/MacOS
      run: |
        echo "=== Building .NET InterceptSuite Application ==="
        chmod +x ./build-installer.sh
        ./build-installer.sh

        echo "=== Verifying .app creation ==="
        if [ -d "../dist" ]; then
          APP_PATH=$(find ../dist -name "*.app" -type d | head -1)
          if [ -n "$APP_PATH" ]; then
            echo "✅ Found .app at: $APP_PATH"
            ls -la "$APP_PATH/Contents/MacOS/"
          else
            echo "❌ No .app bundle found in dist directory"
            exit 1
          fi
        else
          echo "❌ Dist directory not found"
          exit 1
        fi

    - name: Sign .NET Application
      working-directory: GUI/InterceptSuite/Installer/MacOS
      env:
        SIGNING_IDENTITY: ${{ secrets.APPLE_TEAM_ID }}
      run: |
        echo "=== Signing .app bundle ==="
        APP_PATH=$(find ../dist -name "*.app" -type d | head -1)

        # Sign all frameworks and dylibs first
        echo "=== Signing all dylibs and frameworks ==="
        find "$APP_PATH" -name "*.dylib" -exec codesign --force --options runtime --timestamp --sign "$SIGNING_IDENTITY" {} \;

        # Sign the main executable with entitlements
        echo "=== Signing main executable with entitlements ==="
        codesign --force --options runtime --timestamp --entitlements entitlements.plist --sign "$SIGNING_IDENTITY" "$APP_PATH/Contents/MacOS/InterceptSuite"

        # Sign the entire app bundle with entitlements
        echo "=== Signing entire app bundle with entitlements ==="
        codesign --force --options runtime --timestamp --entitlements entitlements.plist --sign "$SIGNING_IDENTITY" "$APP_PATH"

        echo "=== Verifying .app signature ==="
        codesign --verify --deep --strict "$APP_PATH"

        echo "✅ .app bundle signed successfully with entitlements"

    - name: Create and Sign PKG Installer
      working-directory: GUI/InterceptSuite/Installer/MacOS
      env:
        SIGNING_IDENTITY: ${{ secrets.APPLE_TEAM_ID }}
      run: |
        echo "=== Creating PKG installer ==="
        chmod +x ./create-pkg-installer.sh
        ./create-pkg-installer.sh

        echo "=== Signing PKG installer ==="
        PKG_PATH=$(find ../dist -name "*.pkg" | head -1)
        if [ -n "$PKG_PATH" ]; then
          # Create a temporary unsigned copy
          UNSIGNED_PKG="${PKG_PATH%.pkg}_unsigned.pkg"
          SIGNED_PKG="$PKG_PATH"
          mv "$PKG_PATH" "$UNSIGNED_PKG"

          # Sign the PKG with installer certificate
          productsign --keychain build.keychain --sign "$SIGNING_IDENTITY" --timestamp "$UNSIGNED_PKG" "$SIGNED_PKG"

          # Verify the signature
          pkgutil --check-signature "$SIGNED_PKG"
          rm "$UNSIGNED_PKG"

          echo "✅ PKG signed successfully"
        else
          echo "❌ No PKG file found in dist directory"
          exit 1
        fi

    - name: Notarize and Staple PKG
      working-directory: GUI/InterceptSuite/Installer/MacOS
      run: |
        PKG_PATH=$(find ../dist -name "*.pkg" | head -1)
        if [ -n "$PKG_PATH" ]; then
          echo "=== Notarizing PKG installer ==="
          xcrun notarytool submit "$PKG_PATH" --keychain-profile "notarytool-profile" --wait

          echo "=== Stapling PKG installer ==="
          xcrun stapler staple "$PKG_PATH"

          echo "=== Verifying PKG staple ==="
          xcrun stapler validate "$PKG_PATH"

          echo "✅ PKG notarized and stapled successfully"
        else
          echo "❌ No PKG file found in dist directory"
          exit 1
        fi

        echo "=== Verifying package build output ==="
        ls -la ../dist/
    # =====================================================================
    # STEP 4: Create Release Artifacts
    # =====================================================================

    - name: Prepare release artifacts
      run: |
        echo "=== Preparing release artifacts ==="
        mkdir -p release-artifacts

        # Copy PKG file from dist directory
        if [ -d "GUI/InterceptSuite/Installer/dist" ]; then
          # Copy PKG file (if exists)
          find GUI/InterceptSuite/Installer/dist/ -name "*.pkg" -exec cp {} release-artifacts/ \;
          echo "✅ PKG file copied"
        else
          echo "❌ Installer dist directory not found!"
          exit 1
        fi

        echo "=== Release artifacts prepared ==="
        ls -la release-artifacts/

    # =====================================================================
    # STEP 5: Upload to GitHub Release (if this is a release)
    # =====================================================================

    - name: Upload to GitHub Release
      if: github.event_name == 'release' || startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v2
      with:
        files: release-artifacts/*.pkg

    # =====================================================================
    # STEP 6: Upload Build Artifacts (for all builds)
    # =====================================================================

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: macos-release-artifacts
        path: release-artifacts/
        retention-days: 30
        if-no-files-found: error

    # =====================================================================
    # STEP 7: Cleanup Code Signing
    # =====================================================================

    - name: Cleanup Code Signing
      if: always()
      env:
        MY_KEYCHAIN: "build.keychain"
      run: |
        # Delete temporary keychain
        if security list-keychains | grep -q "$MY_KEYCHAIN"; then
          security delete-keychain "$MY_KEYCHAIN"
        fi

        # Reset to default login keychain
        security list-keychains -d user -s login.keychain