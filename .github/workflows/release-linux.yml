name: Linux Release Build

on:
  release:
    types: [published, created]
  workflow_dispatch:  # Allow manual triggering

permissions:
  contents: write  # Needed to create releases and upload artifacts

env:
  BUILD_TYPE: Release

jobs:
  build-linux-release:
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    # =====================================================================
    # STEP 1: Build C Library (.so) using vcpkg and cmake
    # =====================================================================
    - name: Install system dependencies
      run: |
        sudo apt update
        sudo apt install -y \
          build-essential \
          cmake \
          pkg-config \
          libc6-dev \
          libssl-dev \
          libgtk-3-dev \
          libwebkit2gtk-4.0-dev \
          libappindicator3-dev \
          librsvg2-dev \
          patchelf \
          libsoup-3.0-dev \
          libjavascriptcoregtk-4.1-dev \
          libwebkit2gtk-4.1-dev

    - name: Cache vcpkg
      uses: actions/cache@v4
      with:
        path: |
          ${{ github.workspace }}/vcpkg
          !${{ github.workspace }}/vcpkg/buildtrees
          !${{ github.workspace }}/vcpkg/packages
          !${{ github.workspace }}/vcpkg/downloads
        key: vcpkg-linux-${{ hashFiles('vcpkg.json') }}-v2

    - name: Setup vcpkg
      uses: actions/checkout@v4
      with:
        repository: microsoft/vcpkg
        path: vcpkg
        fetch-depth: 0

    - name: Bootstrap vcpkg
      run: |
        cd vcpkg
        ./bootstrap-vcpkg.sh -disableMetrics
        # Update vcpkg to latest
        git pull origin master

    - name: Build C Library (.so)
      run: |
        echo "=== Building InterceptSuite C Library for Linux ==="
        chmod +x build_linux.sh
        ./build_linux.sh --vcpkg-root=${{ github.workspace }}/vcpkg
        echo "=== Verifying shared library build ==="
        ls -la build/
        file build/libIntercept.so
        ldd build/libIntercept.so

    # =====================================================================
    # STEP 2: Setup .NET for InterceptSuite GUI
    # =====================================================================

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    # =====================================================================
    # STEP 3: Build .NET Application and Create Packages
    # =====================================================================

    - name: Build .NET Application and Create Packages
      working-directory: GUI/InterceptSuite/Installer/Linux
      run: |
        echo "=== Building .NET InterceptSuite Application and Creating Packages ==="
        chmod +x ./installer.sh
        sudo ./installer.sh
        chmod +x ./build-packages.sh
        ./build-packages.sh
        echo "=== Verifying package build output ==="
        ls -la ../dist/

    # =====================================================================
    # STEP 4: Create Release Artifacts
    # =====================================================================

    - name: Prepare release artifacts
      run: |
        echo "=== Preparing release artifacts ==="
        mkdir -p release-artifacts

        # Copy packages from dist directory
        if [ -d "GUI/InterceptSuite/Installer/dist" ]; then
          # Copy AppImage file (if exists)
          find GUI/InterceptSuite/Installer/dist/ -name "*.AppImage" -exec cp {} release-artifacts/ \;

          # Copy DEB package (if exists)
          find GUI/InterceptSuite/Installer/dist/ -name "*.deb" -exec cp {} release-artifacts/ \;

          # Copy RPM package (if exists)
          find GUI/InterceptSuite/Installer/dist/ -name "*.rpm" -exec cp {} release-artifacts/ \;

          echo "✅ Package files copied"
        else
          echo "❌ Installer dist directory not found!"
          exit 1
        fi

        echo "=== Release artifacts prepared ==="
        ls -la release-artifacts/

    # =====================================================================
    # STEP 5: Upload to GitHub Release (if this is a release)
    # =====================================================================

    - name: Upload to GitHub Release
      if: github.event_name == 'release' || startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v2
      with:
        files: |
            release-artifacts/*.AppImage
            release-artifacts/*.deb
            release-artifacts/*.rpm

    # =====================================================================
    # STEP 6: Upload Build Artifacts (for all builds)
    # =====================================================================

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: linux-release-artifacts
        path: release-artifacts/
        retention-days: 30
        if-no-files-found: error