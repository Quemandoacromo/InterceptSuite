name: Windows Release Build

on:
  release:
    types: [published, created]
  workflow_dispatch:  # Allow manual triggering

permissions:
  contents: write  # Needed to create releases and upload artifacts

env:
  BUILD_TYPE: Release

jobs:
  build-windows-release:
    runs-on: self-hosted

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    # =====================================================================
    # STEP 1: Build C Library (.dll)
    # =====================================================================

    - name: Build C Library (.dll)
      shell: pwsh
      run: |
        Write-Host "=== Building InterceptSuite C Library for Windows ===" -ForegroundColor Green

        # Build the library using existing vcpkg installation
        .\build_windows.ps1 -VcpkgRoot "D:\vcpkg"

        Write-Host "=== Verifying DLL build ===" -ForegroundColor Green
        $dllPath = "build\Release\Intercept.dll"
        if (Test-Path $dllPath) {
          $dllSize = (Get-Item $dllPath).Length
          Write-Host "‚úÖ Intercept.dll built successfully - Size: $dllSize bytes" -ForegroundColor Green
        } else {
          Write-Error "‚ùå Intercept.dll not found in build directory"
          exit 1
        }

    # =====================================================================
    # STEP 2: Sign C Library DLL
    # =====================================================================

    - name: Sign C Library DLL
      shell: pwsh
      run: |
        Write-Host "=== Signing C Library DLL ===" -ForegroundColor Green

        $dllPath = "build\Release\Intercept.dll"
        Write-Host "Signing $dllPath..." -ForegroundColor Yellow
        & signtool.exe sign /tr http://timestamp.sectigo.com /td sha256 /fd sha256 /sha1 6ffca813ad52ab0142cc2c4b48d1ae2a45c279b8 $dllPath

        if ($LASTEXITCODE -eq 0) {
          Write-Host "‚úÖ DLL signed successfully" -ForegroundColor Green
        } else {
          Write-Error "‚ùå DLL signing failed"
          exit 1
        }

    # =====================================================================
    # STEP 3: Build .NET Application and Create Installer
    # =====================================================================

    - name: Build .NET Application and Create Installer
      shell: pwsh
      run: |
        Write-Host "=== Building .NET InterceptSuite Application ===" -ForegroundColor Green

        # Navigate to the installer directory and run the build script
        Set-Location "GUI\InterceptSuite\Installer\Windows"
        .\build-application.ps1

        Write-Host "=== Signing Published Application EXE ===" -ForegroundColor Green

        # Find the published EXE file
        $publishedExe = Get-ChildItem -Path "..\..\bin\Release\net9.0\win-x64\publish" -Filter "*.exe" -Recurse | Where-Object { $_.Name -like "*InterceptSuite*" } | Select-Object -First 1

        if ($publishedExe) {
          Write-Host "Signing $($publishedExe.FullName)..." -ForegroundColor Yellow
          & signtool.exe sign /tr http://timestamp.sectigo.com /td sha256 /fd sha256 /sha1 6ffca813ad52ab0142cc2c4b48d1ae2a45c279b8 $publishedExe.FullName

          if ($LASTEXITCODE -eq 0) {
            Write-Host "‚úÖ Application EXE signed successfully" -ForegroundColor Green
          } else {
            Write-Error "‚ùå Application EXE signing failed"
            exit 1
          }
        } else {
          Write-Host "‚ö†Ô∏è No application EXE found to sign in publish directory" -ForegroundColor Yellow
        }

        .\build-installers.ps1

        Write-Host "=== Signing Installer EXE ===" -ForegroundColor Green

        # Find the installer EXE file in dist directory
        $installerExe = Get-ChildItem -Path "..\dist" -Filter "*.exe" -Recurse | Select-Object -First 1

        if ($installerExe) {
          Write-Host "Signing $($installerExe.FullName)..." -ForegroundColor Yellow
          & signtool.exe sign /tr http://timestamp.sectigo.com /td sha256 /fd sha256 /sha1 6ffca813ad52ab0142cc2c4b48d1ae2a45c279b8 $installerExe.FullName

          if ($LASTEXITCODE -eq 0) {
            Write-Host "‚úÖ Installer EXE signed successfully" -ForegroundColor Green
          } else {
            Write-Error "‚ùå Installer EXE signing failed"
            exit 1
          }
        } else {
          Write-Error "‚ùå No installer EXE found to sign in dist directory"
          exit 1
        }

    # =====================================================================
    # STEP 4: Create Release Artifacts
    # =====================================================================

    - name: Prepare release artifacts
      shell: pwsh
      run: |
        Write-Host "=== Preparing release artifacts ===" -ForegroundColor Green
        New-Item -ItemType Directory -Path "release-artifacts" -Force

        # Copy EXE installer from dist directory
        if (Test-Path "GUI\InterceptSuite\Installer\dist") {
          $exeFiles = Get-ChildItem -Path "GUI\InterceptSuite\Installer\dist" -Filter "*.exe" -Recurse
          foreach ($exe in $exeFiles) {
            Copy-Item $exe.FullName "release-artifacts\$($exe.Name)"
            Write-Host "‚úÖ EXE installer copied: $($exe.Name)" -ForegroundColor Green
          }
        } else {
          Write-Host "‚ùå Installer dist directory not found!" -ForegroundColor Red
          exit 1
        }

    # =====================================================================
    # STEP 5: Upload to GitHub Release (if this is a release)
    # =====================================================================

    - name: Upload to GitHub Release
      if: github.event_name == 'release' || startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v2
      with:
        files: release-artifacts/*.exe

    # =====================================================================
    # STEP 6: Upload Build Artifacts (for all builds)
    # =====================================================================

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: windows-release-artifacts
        path: release-artifacts/
        retention-days: 30
        if-no-files-found: error

    - name: Build Summary
      shell: pwsh
      run: |
        Write-Host "‚úÖ Windows build completed successfully!" -ForegroundColor Green
        Write-Host "üì¶ EXE installer created and uploaded to release" -ForegroundColor Cyan